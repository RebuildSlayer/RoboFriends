{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundary.js","container/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","width","height","alt","CardList","robots","map","user","i","key","Searchbox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","marginBottom","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onReqRobots","searchField","onSearchChange","isPending","filterRobots","filter","robot","toLowerCase","includes","marginTop","connect","searchRobots","reqRobots","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ad546638.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({id,name,email}) => { \r\n\treturn(\r\n\t\t<div className=\"bg-light-green dib br3 ma2 \r\n\t\tpa3 grow tc bw2 shadow-5 custom\">\r\n\t\t\t<img src={`https://robohash.org/${id}`}\r\n\t\t\twidth=\"200px\" height=\"200px\" \r\n\t\t\talt={`Robot(${name})`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h3 className=\"name\">{name}</h3>\r\n\t\t\t\t<p className=\"email\">{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n\treturn(\r\n\t<div>\r\n\t\t{\r\n\t\trobots.map((user,i) => {\r\n\t\treturn (\r\n\t\t\t<Card \r\n\t\t\tkey={i}\r\n\t\t\tid={robots[i].id} \r\n\t\t\tname={robots[i].name} \r\n\t\t\temail={robots[i].email}\r\n\t\t\t/>\r\n\t\t\t);\r\n\t\t})\r\n\t\t}\r\n\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst Searchbox = ({searchChange}) => {\r\n\t\treturn(\r\n\t\t\t<div className=\"pa2\">\r\n\t\t\t\t<input type=\"search\" \r\n\t\t\t\tplaceholder=\"Search Robots Here\"\r\n\t\t\t\tclassName=\"pa3 ba b--green \r\n\t\t\t\tbg-lightest-blue\"\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\nimport './Scroll.css';\r\n\r\nconst Scroll = ((props) =>{\r\n\treturn(\r\n\t\t<div style = {{ \r\n\t\t\toverflowY : 'scroll' , \r\n\t\t\tborder : '2px solid black' , \r\n\t\t\theight : '56vh' , \r\n\t\t\tmarginBottom : '20px'\r\n\t\t}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n})\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thasError : false\r\n\t\t}\r\n\t}\r\n\r\ncomponentDidCatch(error,info){\r\n\tthis.setState({ hasError : true });\r\n}\r\n\r\n\trender(){\r\n\t\tif (this.state.hasError)\r\n\t\t\treturn <h1 className=\"tc\">Sorry for the inconvinience<br/><br/>Site is currently down</h1>;\r\n\t\telse{\r\n\t\t\treturn (this.props.children);\r\n\t\t}\r\n\t}\r\n}\r\nexport default ErrorBoundary;","import React,{Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport Searchbox from '../components/Searchbox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\nimport { setSearchField , reqRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn{\r\n\t\tsearchField : state.searchRobots.searchField,\r\n\t\trobots : state.reqRobots.robots,\r\n\t\tisPending : state.reqRobots.isPending,\r\n\t\terror : state.reqRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn{\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonReqRobots : () => dispatch(reqRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component{\r\n\r\ncomponentDidMount(){\r\n\tthis.props.onReqRobots();\r\n}\r\n\r\n\r\n\trender(){\r\n\t\tconst { searchField , onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filterRobots = robots.filter((robot) =>{\r\n\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t})\r\n\r\n\t\treturn(\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<img \r\n\t\t\t\tsrc=\"robofriends.png\" \r\n\t\t\t\talt=\"Robofriends\" \r\n\t\t\t\tstyle={{ width : '500px' , marginTop : '10px'}}\r\n\t\t\t\t/><br/><br/>\r\n\t\t\t\t<Searchbox searchChange={onSearchChange}/><br/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t{(isPending) ? \r\n\t\t\t \t<h1 className=\"tc\">Loading........!</h1> : \r\n\t\t\t\t<CardList robots={filterRobots}/>}\r\n\t\t\t\t</Scroll>\r\n\r\n\t\t\t</div>\r\n\t\t\t</ErrorBoundary>\r\n\t\t);\r\n\r\n\t}\r\n}\r\nexport default connect( mapStateToProps , mapDispatchToProps )(App);","import { CHANGE_SEARCH_FIELD,\r\n \t\t REQ_ROBOTS_PENDING,\r\n \t\t REQ_ROBOTS_SUCCESS,\r\n \t\t REQ_ROBOTS_FAILED \r\n \t\t} \r\n from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n\t\ttype :CHANGE_SEARCH_FIELD,\r\n\t\tpayload : text\r\n})\r\n\r\n\r\nexport const reqRobots = () => (dispatch) => {\r\n\tdispatch({ type : REQ_ROBOTS_PENDING });\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response => response.json())\r\n\t.then(users => dispatch({ type : REQ_ROBOTS_SUCCESS , payload : users }))\r\n\t.catch(error => dispatch({ type : REQ_ROBOTS_FAILED , payload : error }))\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQ_ROBOTS_PENDING = 'REQ_ROBOTS_PENDING';\r\n\r\nexport const REQ_ROBOTS_SUCCESS = 'REQ_ROBOTS_SUCCESS';\r\n\r\nexport const REQ_ROBOTS_FAILED = 'REQ_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD,\r\n \t\t REQ_ROBOTS_PENDING,\r\n \t\t REQ_ROBOTS_SUCCESS,\r\n \t\t REQ_ROBOTS_FAILED \r\n \t\t} \r\n from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField : ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch , action = {}) => {\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({} , state , {searchField : action.payload});\r\n\t\tdefault :\r\n\t\t \treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending : false,\r\n\trobots : [],\r\n\terror : ''\r\n}\r\n\r\nexport const reqRobots = (state = initialStateRobots , action = {}) => {\r\n\tswitch(action.type){\r\n\t\tcase REQ_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending : true});\r\n\t\tcase REQ_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots : action.payload, isPending : false});\r\n\t\tcase REQ_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error : action.payload, isPending : false});\r\n\t\tdefault:\r\n\t\t \treturn state;\r\n\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { createStore , applyMiddleware , combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots , reqRobots } from './reducers';\nimport { createLogger } from 'redux-logger';\n\nconst rootReducer = combineReducers({ searchRobots , reqRobots });\nconst logger = createLogger();\nconst store = createStore(rootReducer , applyMiddleware(thunkMiddleware, logger));\n\n\nReactDOM.render(\n\t\t\t\t<Provider store={store}>\n\t\t\t\t\t<App/>\n\t\t\t\t</Provider>\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}